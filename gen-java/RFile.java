/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RFile implements org.apache.thrift.TBase<RFile, RFile._Fields>, java.io.Serializable, Cloneable, Comparable<RFile> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RFile");

  private static final org.apache.thrift.protocol.TField F_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IS_LOCKED_FIELD_DESC = new org.apache.thrift.protocol.TField("isLocked", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RFileStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RFileTupleSchemeFactory());
  }

  public String fName; // optional
  public String content; // optional
  public String isLocked; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    F_NAME((short)1, "fName"),
    CONTENT((short)2, "content"),
    IS_LOCKED((short)3, "isLocked");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // F_NAME
          return F_NAME;
        case 2: // CONTENT
          return CONTENT;
        case 3: // IS_LOCKED
          return IS_LOCKED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.F_NAME,_Fields.CONTENT,_Fields.IS_LOCKED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.F_NAME, new org.apache.thrift.meta_data.FieldMetaData("fName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_LOCKED, new org.apache.thrift.meta_data.FieldMetaData("isLocked", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RFile.class, metaDataMap);
  }

  public RFile() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RFile(RFile other) {
    if (other.isSetFName()) {
      this.fName = other.fName;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetIsLocked()) {
      this.isLocked = other.isLocked;
    }
  }

  public RFile deepCopy() {
    return new RFile(this);
  }

  @Override
  public void clear() {
    this.fName = null;
    this.content = null;
    this.isLocked = null;
  }

  public String getFName() {
    return this.fName;
  }

  public RFile setFName(String fName) {
    this.fName = fName;
    return this;
  }

  public void unsetFName() {
    this.fName = null;
  }

  /** Returns true if field fName is set (has been assigned a value) and false otherwise */
  public boolean isSetFName() {
    return this.fName != null;
  }

  public void setFNameIsSet(boolean value) {
    if (!value) {
      this.fName = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public RFile setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getIsLocked() {
    return this.isLocked;
  }

  public RFile setIsLocked(String isLocked) {
    this.isLocked = isLocked;
    return this;
  }

  public void unsetIsLocked() {
    this.isLocked = null;
  }

  /** Returns true if field isLocked is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLocked() {
    return this.isLocked != null;
  }

  public void setIsLockedIsSet(boolean value) {
    if (!value) {
      this.isLocked = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case F_NAME:
      if (value == null) {
        unsetFName();
      } else {
        setFName((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case IS_LOCKED:
      if (value == null) {
        unsetIsLocked();
      } else {
        setIsLocked((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case F_NAME:
      return getFName();

    case CONTENT:
      return getContent();

    case IS_LOCKED:
      return getIsLocked();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case F_NAME:
      return isSetFName();
    case CONTENT:
      return isSetContent();
    case IS_LOCKED:
      return isSetIsLocked();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RFile)
      return this.equals((RFile)that);
    return false;
  }

  public boolean equals(RFile that) {
    if (that == null)
      return false;

    boolean this_present_fName = true && this.isSetFName();
    boolean that_present_fName = true && that.isSetFName();
    if (this_present_fName || that_present_fName) {
      if (!(this_present_fName && that_present_fName))
        return false;
      if (!this.fName.equals(that.fName))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_isLocked = true && this.isSetIsLocked();
    boolean that_present_isLocked = true && that.isSetIsLocked();
    if (this_present_isLocked || that_present_isLocked) {
      if (!(this_present_isLocked && that_present_isLocked))
        return false;
      if (!this.isLocked.equals(that.isLocked))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RFile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFName()).compareTo(other.isSetFName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fName, other.fName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsLocked()).compareTo(other.isSetIsLocked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLocked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLocked, other.isLocked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RFile(");
    boolean first = true;

    if (isSetFName()) {
      sb.append("fName:");
      if (this.fName == null) {
        sb.append("null");
      } else {
        sb.append(this.fName);
      }
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (isSetIsLocked()) {
      if (!first) sb.append(", ");
      sb.append("isLocked:");
      if (this.isLocked == null) {
        sb.append("null");
      } else {
        sb.append(this.isLocked);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RFileStandardSchemeFactory implements SchemeFactory {
    public RFileStandardScheme getScheme() {
      return new RFileStandardScheme();
    }
  }

  private static class RFileStandardScheme extends StandardScheme<RFile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RFile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // F_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fName = iprot.readString();
              struct.setFNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_LOCKED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isLocked = iprot.readString();
              struct.setIsLockedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RFile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fName != null) {
        if (struct.isSetFName()) {
          oprot.writeFieldBegin(F_NAME_FIELD_DESC);
          oprot.writeString(struct.fName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isLocked != null) {
        if (struct.isSetIsLocked()) {
          oprot.writeFieldBegin(IS_LOCKED_FIELD_DESC);
          oprot.writeString(struct.isLocked);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RFileTupleSchemeFactory implements SchemeFactory {
    public RFileTupleScheme getScheme() {
      return new RFileTupleScheme();
    }
  }

  private static class RFileTupleScheme extends TupleScheme<RFile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RFile struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFName()) {
        optionals.set(0);
      }
      if (struct.isSetContent()) {
        optionals.set(1);
      }
      if (struct.isSetIsLocked()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFName()) {
        oprot.writeString(struct.fName);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetIsLocked()) {
        oprot.writeString(struct.isLocked);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RFile struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.fName = iprot.readString();
        struct.setFNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.isLocked = iprot.readString();
        struct.setIsLockedIsSet(true);
      }
    }
  }

}

